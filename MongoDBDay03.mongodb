//=================================================
//                   AGGREGATION
//=================================================
// 1) Aggregation, dokumanlardaki verilerin islenmesi ve hesaplanan
//    sonuclarin donmesini saglayan islemlerdir.
//
// 2) Aggregation islemleri, farklı dokumanlardaki degerleri gruplandirabilir.
//
// 3) Bu gruplanan veriler uzerinde cesitli islemlerin gereceklestirelerek tek
//    bir sonuc degerinin donmesi saglanabilir.
//
// 4) MongoDB, 3 farklı yontem ile aggregation gerceklestirmeye izin verir.
//     A) aggregation pipeline (toplama boru hattı) --> best practice...
//     B) map-reduce function (map indirgeme)
//     C) single-purpose aggregation (tek-amaç toplama)
//
// 5) Aggregiation, SQL'deki Join islemlerine benzetilebilir.
//=================================================
//             AGGREGATION PIPELINE
//=================================================
// SYNTAX
//
//   pipeline = [
//   { $match : { … },
//   { $group : { … },
//   { $sort : { … },
//      ...
//   ]
//   db.collectionName.aggregate({pipeline}, {options})
//
//  $match() –> Verileri secerken flitrelemek icin
//  $group({_id : "$field"}) - >islenen verilerin gruplanmasi icin
//  $sort() -> Sonuclarin siralanmasi icin
// NOT : VSCode ile yazıldığından , her komut önüne, use("DB_ismi") yazılmalı !!


use('okul');
db.grades.insertMany([
{_id:6305, name: "A. MacDyver", "assignment":5, "points" :24},
{_id:6308, name: "B. Batlock", "assignment":3, "points" :22},
{_id:6312, name: "M. Tagnum", "assignment":5, "points" :30},
{_id:6319, name: "R. Stiles", "assignment":2, "points" :12},
{_id:6322, name: "A. MacDyver", "assignment":2, "points" :14},
{_id:6334, name: "R. Stiles", "assignment":1, "points" :10}
]);

// 1 ) bütün assignmentların toplam pointlerini bulunuz
use("okul");
var pipeline = 
                  [{$match: {}},//filtreye ihtiyac yok
                   {$group: {"_id" : "$assignment", total_points : {$sum:"$points"}}}
                  ];
db.grades.aggregate(pipeline);

// 2 ) Her assignmentın ortalama point değerlerini bulalım
use("okul");
var pipeline = [{$match: {}},
                {$group: {"_id": "$assignment", avg_points : {$avg:"$points"}}}
               ];
db.grades.aggregate(pipeline);

//3 ) Her assigmentın eb küçük point değerini bulalım
use("okul");
var pipeline = [{$match:{}},
                {$group:{"_id":"$assignment", min_point : {$min : "$points"}}}
               ];
db.grades.aggregate(pipeline);

//4 ) Assigment sayısı 4 den az olan kayıtların ortalama point sayısını bulalım
use("okul");
var pipeline = [{$match:{"assignment": {$lt:4}}},//filtreleme
                {$group: {"_id": "$assignment", avg_points : {$avg:"$points"}}}
               ];
db.grades.aggregate(pipeline);      

//5 ) ismi A ile başlıyan dökümanların toplam point sayısını bulunuz
use("okul");
var pipeline = [{$match: {"name": {$regex:"^A"}}},
                {$group:{"_id":null, total_points: {$sum:"$points"}}}
               ];
db.grades.aggregate(pipeline);

//6 ) ismi s ile biten dökümanalrın toplam point sayısını bulalım

use("okul");
var pipeline = [{$match: {"name": {$regex:"s$"}}},
                {$group:{"_id":null, total_points: {$sum:"$points"}}}
               ];
db.grades.aggregate(pipeline);

//7) points değeri 19 dan düşük olan dökümanların sayısını bulunuz
use("okul");
var pipeline = [{$match : {"points": {$lt:19}}},
                {$group:{"_id":null,dokumanlarin_sayisi: {$count:{}}}}
               ];
db.grades.aggregate(pipeline);
//2. Yol
use("okul");
db.grades.find({"points": {$lt:19}}).count()

//3. Yol
use("okul");
db.grades.count({"points": {$lt:19}});

//4.Yol
use("okul");
var pipeline = [{$match : {"points": {$lt:19}}},
                {$count: 'Az puanlar'}
];
db.grades.aggregate(pipeline);